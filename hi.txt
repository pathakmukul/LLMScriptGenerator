<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Training 2.0</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <!-- <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script> -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.2/FileSaver.min.js"></script>
    <script>
          document.addEventListener('DOMContentLoaded', function() {

            document.getElementById('download-button').addEventListener('click', function() {
                var summary = "Summary:\n" + document.getElementById('summary-content').textContent + "\n";
                var plan = "Plan:\n" + document.getElementById('plan-content').textContent + "\n";
                var script = "Script:\n" + document.getElementById('script-content').textContent + "\n";
                var screenplay = "Screenplay:\n" + document.getElementById('screenplay-content').textContent + "\n";

                var content = summary + plan + script + screenplay;

                var blob = new Blob([content], {type: "text/plain;charset=utf-8"});
                saveAs(blob, "script.doc");
            });
    const button = document.getElementById('generate-button');
    const title = document.querySelector('[name="title"]');
    const audience = document.querySelector('[name="audience"]');
    const category = document.querySelector('[name="category"]');
    const videoLength = document.querySelector('[name="video-length"]');
    const content = document.querySelector('[name="content"]');
    const fileInput = document.querySelector('[name="files"]');
    var generateButton = document.getElementById('generate-button');
            if (generateButton) {
                generateButton.addEventListener('click', function() {
                    var title = document.querySelector('[name="title"]').value;
                    var audience = document.querySelector('[name="audience"]').value;
                    var category = document.querySelector('[name="category"]').value;
                    var videoLength = document.querySelector('[name="video-length"]').value;
                    var content = document.querySelector('[name="content"]').value;
                    // socket.emit('generate_content', {
                    //     title: title,
                    //     audience: audience, 
                    //     category: category, 
                    //     video_length: videoLength, 
                    //     content: content 
                    // });
                    // Moved the visibility logic to the socket.on('content_update', ...) handler
                });
            } else {
                console.error('Generate button not found!');
            }
    function updateButtonState() {
      // Check if all fields have a value
    //   if (title.value && audience.value && category.value && videoLength.value && content.value) {
    //     button.disabled = false; // Enable the button
    //   } else {
    //     button.disabled = true; // Disable the button
    //   }
    const allFieldsFilled = title.value && audience.value && category.value && videoLength.value && (content.value || fileInput.files.length);
      button.disabled = !allFieldsFilled;

    }
    
    // Add event listeners to all fields
    [title, audience, category, videoLength, content, fileInput].forEach(field => {
      field.addEventListener('change', updateButtonState);
    //   field.addEventListener('keyup', updateButtonState); // For immediate response on text input
    });
    
    updateButtonState(); // Call on page load to set initial button state
            var socket = io();

            // 
            button.addEventListener('click', function(e) {
        e.preventDefault();
        let formData = new FormData();

        // Check if files are uploaded
        if (fileInput.files.length > 0) {
            // Add files to FormData to send for text extraction
            for (let i = 0; i < fileInput.files.length; i++) {
                formData.append('files', fileInput.files[i]);
            }

            // Fetch call to send files to server for text extraction
            fetch('/upload_files', {
                method: 'POST',
                body: formData,
            })
            .then(response => response.json())
            .then(data => {
                // Emit socket event with concatenated text from files
                socket.emit('generate_content', { content: data.content, ...otherFormData() });
            })
            .catch(error => console.error('Error:', error));
        } else {
            // If no files are uploaded, use the content from the textarea
            socket.emit('generate_content', { content: content.value, ...otherFormData() });
        }
    });

    // Function to gather other form data
    function otherFormData() {
        return {
            title: title.value,
            audience: audience.value,
            category: category.value,
            video_length: videoLength.value
        };
    }

            // 
        
            socket.on('content_update', function(data) {
                // Directly update the appropriate section based on the data.type
                switch (data.type) {
                    case 'Summary':
                        document.getElementById('summary-content').innerHTML = data.content;
                        document.getElementById('summary-content').style.display = 'block'; // Ensure content is visible
                        break;
                    case 'Plan':
                        document.getElementById('plan-content').innerHTML = data.content;
                        document.getElementById('plan-content').style.display = 'block';
                        break;
                    case 'Script':
                        document.getElementById('script-content').innerHTML = data.content;
                        document.getElementById('script-content').style.display = 'block';
                        break;
                    case 'Screenplay':
                        document.getElementById('screenplay-content').innerHTML = data.content;
                        document.getElementById('screenplay-content').style.display = 'block';
                        break;
                }
                console.log(`${data.type} updated`);
        
                // Make the tabs and download buttons visible when content is updated
                document.querySelector('.tabs-container').style.display = 'flex'; // Adjust based on your layout
                document.querySelector('.downloads-container').style.display = 'flex'; // Adjust based on your layout
            });
        
            
        
            // Handle tab click to show related content and activate the tab
            document.querySelectorAll('.tab-button').forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active class from all tabs and hide all content
                    document.querySelectorAll('.tab-button').forEach(btn => {
                        btn.classList.remove('active');
                        const contentId = btn.getAttribute('data-content');
                        document.getElementById(contentId).style.display = 'none';
                    });
                    // Add active class to clicked tab and show its content
                    button.classList.add('active');
                    const contentToShowId = button.getAttribute('data-content');
                    document.getElementById(contentToShowId).style.display = 'block';
                });
            });
        
            // Click the first tab by default to show its content initially
            document.querySelector('.tab-button').click();
        });
        

//         document.querySelectorAll('.copy-button').forEach(button => {
//     button.addEventListener('click', function() {
//         // Create a temporary textarea to copy the text
//         var tempTextArea = document.createElement('textarea');
//         tempTextArea.value = this.parentElement.textContent;
//         document.body.appendChild(tempTextArea);
//         tempTextArea.select();
//         document.execCommand('copy');
//         document.body.removeChild(tempTextArea);
//         alert('Text copied to clipboard');
//     });
// });
        </script>
        
        
        
    <style>
        body {
            font-family: 'Open Sans', sans-serif;
        }
        /* .tab-button.active {
            background-color: #F7F7F7; 
            color: #1434CB; 
            border-color: #1434CB;
        }
        .tab-button {
            transition: background-color 0.3s, color 0.3s, border-color 0.3s;
        } */
        .btn-visa-blue {
            background-color: #1434CB; /* Visa blue */
            color: white;
        }
        .border-visa-blue {
            border-color: #1434CB; /* Visa blue */
        }
        .content-display {
        min-height: 8rem; /* Default height */
        overflow: auto; /* Enables scrollbar if content overflows */
        border: 1px solid #1434CB; /* Border to match your design */
        padding: 1rem; /* Padding for aesthetic spacing */
        margin-bottom: 1rem; /* Margin for spacing between boxes */
        background-color: white; /* Background color */
        border-radius: .5rem; /* Rounded corners to match your design */
        }
        /* .tab-button.active {
        background-color: #4F46E5; 
        color: white;
        border-color: #4F46E5; 
        font-weight: 600; 
    } */

    /* Container for both tabs and content */
.tabs-and-content-container {
    display: flex;
    flex-direction: row; /* Align side by side */
}

/* Container for just the tabs to stack them vertically */
.tabs-container {
    display: flex;
    flex-direction: column; /* Stack vertically */
    margin-right: 1rem; /* Add some space between tabs and content */
}

/* Styling for the individual tabs */
.tab-button {
    background-color: #F7F7F7; /* light gray */
    color: #1434CB; /* Your primary color */
    border: 2px solid #1434CB; /* Your primary color */
    padding: 0.5rem 1rem;
    margin-bottom: 0.25rem; /* Space between tabs */
    cursor: pointer; /* Indicates the tab is clickable */
    text-align: left; /* Align text to the left */
    border-radius: 0.5rem; /* Rounded corners for the tabs */
    width: 100%; /* Full width of the container */
}

/* Active state for tabs */
.tab-button.active {
    background-color: #FCC015; /* Your primary color */
    color: white; /* White text for the active tab */
}

/* Styling for the content area next to the tabs */
.content-area {
    flex-grow: 1; /* Take up remaining space */
    border: 2px solid #1434CB; /* Your primary color */
    padding: 1rem;
    border-radius: 0.5rem; /* Rounded corners for the content box */
}


    </style>
</head>

<body class="flex flex-col h-full bg-gray-50 text-gray-800">
    <div class="flex-grow">
    <header class="bg-[#FCC015] text-white sticky top-0 z-50">
        <div class="container mx-auto flex justify-between items-center p-4">
            <h1 class="text-2xl font-bold" style="color: #1434CB;">SMART TRAINING 2.0</h1>
            <!-- Logo on the rightmost side -->
            <div>
                <img src="https://cdn.visa.com/v2/assets/images/logos/visa/blue/logo.png" alt="Visa Logo" class="h-8"> <!-- Adjust the height as needed -->
            </div>
        </div>
    </header>
    
    <div class="container mx-auto p-6">
       

        <div class="mb-4">
            <input type="text" name ="title" placeholder="Working TITLE" class="w-full p-2 border border-visa-blue rounded mb-3">
            <div class="flex space-x-2 mb-3">
                <select name="audience" class="p-2 border border-visa-blue rounded">
                    <option selected disabled>Select Audience</option>
                    <option>Developer</option>
                    <option>Product Manager</option>
                    <option>Executives</option>
                    <option>Sales</option>



                </select>
                <select name="category" class="p-2 border border-visa-blue rounded">
                    <option selected disabled>Select Category</option>
                    <option>Training</option>
                    <option>Case Study</option>
                    <option>Onboarding</option>
                    <option>Standard Procedures</option>
                    <option>Code Walkthrough</option>
                    <option>How-To Videos</option>
                    <option>Cheat Sheets</option>
                    <option>Masterclass</option>
                    <option>Story</option>

                </select>
                <input name="video-length" type="number" placeholder="Video Length" class="w-full p-2 border border-visa-blue rounded" min="2" max="8">
            </div>
            <input type="file" name="files" multiple class="mb-3">

            <textarea name="content" placeholder="Enter your content here" class="w-full p-2 border border-visa-blue rounded mb-3"></textarea>
            <div class="flex justify-center mt-3">
                <button id="generate-button" class="p-2 btn-visa-blue rounded">Generate!</button>
            </div>
        </div>

<!-- Initially hidden tabs -->
<!-- <div class="mb-4 tabs-container" style="display: none;">
    <div class="flex space-x-2 mb-3">
        <button class="tab-button p-2 border border-visa-blue rounded" data-content="summary-content">Summary</button>
        <button class="tab-button p-2 border border-visa-blue rounded" data-content="plan-content">Plan</button>
        <button class="tab-button p-2 border border-visa-blue rounded" data-content="script-content">Script</button>
        <button class="tab-button p-2 border border-visa-blue rounded" data-content="screenplay-content">Screenplay</button>
    </div>
    <div id="summary-content" class="content-display p-2 border border-visa-blue rounded mb-3 bg-white" style="display: none;">Summary box</div>
    <div id="plan-content" class="content-display p-2 border border-visa-blue rounded mb-3 bg-white" style="display: none;">Plan box</div>
    <div id="script-content" class="content-display p-2 border border-visa-blue rounded mb-3 bg-white" style="display: none;">Script box</div>
    <div id="screenplay-content" class="content-display p-2 border border-visa-blue rounded mb-3 bg-white" style="display: none;">Director box</div>
</div>

<div class="flex space-x-2 downloads-container" style="display: none;">
    <button class="p-2 btn-visa-blue rounded">Download Screenplay</button>
    <button class="p-2 btn-visa-blue rounded">Download Script</button>
</div> -->
<div class="tabs-and-content-container">
    <div class="tabs-container" style="display: none;">
        <button class="tab-button" data-content="summary-content">Summary</button>
        <button class="tab-button" data-content="plan-content">Plan</button>
        <button class="tab-button" data-content="script-content">Script</button>
        <button class="tab-button" data-content="screenplay-content">Screenplay</button>
    </div>
    
    <div class="content-area">
        <div id="summary-content" style="display: none;">Summary appears here
        <!-- <button class="copy-button">Copy</button> -->
        </div>
        <div id="plan-content" style="display: none;">Plan Summary appears here
        <!-- <button class="copy-button">Copy</button> -->
        </div>
        <div id="script-content" style="display: none;">Script Summary appears here
            <!-- <button class="copy-button">Copy</button> -->
        </div>
        <div id="screenplay-content" style="display: none;">Screenplay Summary appears here
            <!-- <button class="copy-button">Copy</button> -->
        </div>
    </div>
</div>

<br>
<br>
<div class="flex space-x-2 downloads-container" style="display: none;">
    <button class="p-2 btn-visa-blue rounded">Download Screenplay</button>
    <button id="download-button" class="p-2 btn-visa-blue rounded">Download Script</button>
</div> 
        </div>
    </div>
</div>

    <footer class="bg-gray-100 mt-auto">
        <div class="container mx-auto p-6 text-gray-800">
            <div class="text-center text-sm mt-4">
                © 2024 Smart Training 2.0. All rights reserved.
            </div>
        </div>
    </footer>
</body>

<!-- </body> -->
</html>
